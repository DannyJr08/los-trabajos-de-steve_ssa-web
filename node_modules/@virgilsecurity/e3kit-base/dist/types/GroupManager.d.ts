import { CardManager } from 'virgil-sdk';
import { ICard, Ticket } from './types';
import { PrivateKeyLoader } from './PrivateKeyLoader';
import { Group } from './groups/Group';
import { GroupLocalStorage } from './GroupLocalStorage';
export interface GroupManagerConstructorParams {
    identity: string;
    privateKeyLoader: PrivateKeyLoader;
    cardManager: CardManager;
    groupLocalStorage: GroupLocalStorage;
}
export declare class GroupManager {
    private _selfIdentity;
    private _localGroupStorage;
    private _privateKeyLoader;
    private _cardManager;
    constructor({ identity, privateKeyLoader, cardManager, groupLocalStorage, }: GroupManagerConstructorParams);
    store(ticket: Ticket, cards: ICard[]): Promise<Group>;
    pull(sessionId: string, initiatorCard: ICard): Promise<Group>;
    retrieve(sessionId: string, epochNumber?: number): Promise<Group | null>;
    addAccess(sessionId: string, allowedCards: ICard[]): Promise<void>;
    removeAccess(sessionId: string, forbiddenIdentities: string[]): Promise<void>;
    delete(sessionId: string): Promise<void>;
    reAddAccess(sessionId: string, allowedCard: ICard): Promise<void>;
    cleanup(): Promise<void>;
    private get selfIdentity();
    private getLocalGroupStorage;
    private getCloudTicketStorage;
}
