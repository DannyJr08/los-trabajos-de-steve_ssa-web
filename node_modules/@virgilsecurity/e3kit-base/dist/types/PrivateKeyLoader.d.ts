import { IPrivateKey, ICrypto, IBrainKeyCrypto, IAccessTokenProvider, IKeyEntryStorage, IKeyPair } from './types';
/**
 * @hidden
 */
export interface PrivateKeyLoaderOptions {
    virgilCrypto: ICrypto;
    brainKeyCrypto: IBrainKeyCrypto;
    accessTokenProvider: IAccessTokenProvider;
    keyEntryStorage: IKeyEntryStorage;
    apiUrl?: string;
}
/**
 * @hidden
 */
export declare class PrivateKeyLoader {
    identity: string;
    options: PrivateKeyLoaderOptions;
    private localStorage;
    private keyknoxClient;
    private keyknoxCrypto;
    private cachedPrivateKey;
    constructor(identity: string, options: PrivateKeyLoaderOptions);
    savePrivateKeyRemote(privateKey: IPrivateKey, password: string, keyName?: string): Promise<import("@virgilsecurity/keyknox/dist/types/types").CloudEntry>;
    savePrivateKeyLocal(privateKey: IPrivateKey): Promise<import("virgil-sdk").IKeyEntry>;
    loadLocalPrivateKey(): Promise<IPrivateKey | null>;
    loadLocalKeyPair(): Promise<IKeyPair | null>;
    resetLocalPrivateKey(): Promise<void>;
    resetPrivateKeyBackup(password: string): Promise<void>;
    resetPrivateKeyBackupWithKeyName(keyName: string): Promise<void>;
    resetAll(): Promise<void>;
    restorePrivateKey(password: string, keyName?: string): Promise<IPrivateKey>;
    changePassword(oldPwd: string, newPwd: string, keyName?: string): Promise<void>;
    hasPrivateKey(): Promise<boolean>;
    private handleResetError;
    private generateBrainPair;
    private getStorage;
    private importAndCachePrivateKey;
}
