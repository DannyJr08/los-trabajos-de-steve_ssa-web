import { IPublicKey } from './types';
/**
 * Custom error class for errors specific to Virgil E3kit.
 */
export declare class SdkError extends Error {
    constructor(m: string, name?: string, DerivedClass?: any);
}
/**
 * Error thrown by {@link EThree.register} when identity is already registered on Virgil Cloud.
 * To load private key use EThree.restorePrivateKey or EThree.rotatePrivateKey.
 */
export declare class IdentityAlreadyExistsError extends SdkError {
    constructor();
}
/**
 * Error thrown by  {@link Ethree.unregister} and {@link EThree.rotatePrivateKey}
 * when current identity of E3kit instance is not registered (i.e. there is
 * no Virgil Card for the current identity in Virgil Cloud).
 */
export declare class RegisterRequiredError extends SdkError {
    constructor();
}
/**
 * Error thrown by {@link EThree.backupPrivateKey},  {@link EThree.changePassword} and
 * {@link EThree.resetPrivateKeyBackup} when user enters wrong password.
 */
export declare class WrongKeyknoxPasswordError extends SdkError {
    constructor();
}
/**
 * Error thrown by {@link EThree.rotatePrivateKey} and {@link EThree.restorePrivateKey}
 */
export declare class PrivateKeyAlreadyExistsError extends SdkError {
    constructor();
}
/**
 * Error thrown by {@link EThree.resetPrivateKeyBackup} when backup copy of private key doesn't exist
 */
export declare class PrivateKeyNoBackupError extends SdkError {
    constructor();
}
/**
 * Error thrown by {@link EThree.register}, {@link EThree.rotatePrivateKey} and {@link EThree.lookupPublicKeys}
 * when one user has more then one card.
 */
export declare class MultipleCardsError extends SdkError {
    identity: string;
    constructor(identity: string);
}
/**
 * @deprecated and will be removed in next major release.
 */
export declare type LookupResultWithErrors = {
    [identity: string]: IPublicKey | Error;
};
/**
 * Error thrown by {@link EThree.lookupPublicKeys} in case if some identity missing or has multiple cards.
 *
 * @deprecated and will be removed in next major release.
 */
export declare class LookupError extends SdkError {
    /**
     * Key Value object, where key is identity and value is IPublicKey or [[MultipleCardsError]] or [[LookupNotFoundError]]
     */
    lookupResult: LookupResultWithErrors;
    constructor(lookupResult: LookupResultWithErrors);
}
/**
 * Error thrown by {@link EThree.lookupPublicKeys} in case if sought identity is not registered.
 *
 * @deprecated and will be removed in next major release.
 */
export declare class LookupNotFoundError extends SdkError {
    identity: string;
    constructor(identity: string);
}
/**
 * Error thrown by {@link EThree.decryptFile} in case if signature of the file is not valid.
 */
export declare class IntegrityCheckFailedError extends SdkError {
    constructor(message: string);
}
/**
 * Error thrown by {@link EThree.decryptFile} or {@link EThree.encryptFile} if user aborts an operation.
 */
export declare class AbortError extends SdkError {
    constructor();
}
/**
 * Error thrown by {@link EThree.findUsers} when some of the users's Virgil Cards weren't found.
 */
export declare class UsersNotFoundError extends SdkError {
    identities: string[];
    constructor(identities: string[]);
}
/**
 * Error thrown by {@link EThree.findUsers} when some of the users found have more than one Virgil Card,
 * which is not allowed.
 */
export declare class UsersFoundWithMultipleCardsError extends SdkError {
    identities: string[];
    constructor(identities: string[]);
}
export declare enum GroupErrorCode {
    LocalGroupNotFound = 1,
    PermissionDenied = 2,
    RemoteGroupNotFound = 3,
    InvalidGroup = 4,
    InvalidChangeParticipants = 5,
    InvalidParticipantsCount = 6,
    DataVerificationFailed = 7,
    GroupIdTooShort = 8,
    MessageNotFromThisGroup = 9,
    GroupIsOutdated = 10,
    NoAccess = 11,
    ParticipantAlreadyAdded = 12
}
export declare class GroupError extends SdkError {
    errorCode: GroupErrorCode;
    constructor(errorCode: GroupErrorCode, message: string);
}
/**
 * Error thrown when an attempt is made to retrieve the private key from the
 * device's persistent storage, but no private key exists.
 *
 * Thrown by {@link EThree.encrypt}, {@link EThree.decrypt}, {@link EThree.backupPrivateKey},
 * {@link EThree.createGroup}, {@link EThree.loadGroup}, {@link EThree.getGroup},
 * {@link Group.encrypt}, {@link Group.decrypt}, {@link Group.update}, {@link Group.add},
 * {@link Group.remove} and {@link Group.reAdd}.
 */
export declare class MissingPrivateKeyError extends SdkError {
    constructor();
}
