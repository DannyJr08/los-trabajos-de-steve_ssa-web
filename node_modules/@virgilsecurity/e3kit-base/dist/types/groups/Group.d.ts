/// <reference types="node" />
import { Data, FindUsersResult, NodeBuffer, Ticket } from '../types';
import { PrivateKeyLoader } from '../PrivateKeyLoader';
import { ICard } from '../types';
import { CardManager } from 'virgil-sdk';
import { GroupManager } from '../GroupManager';
export declare const isValidParticipantCount: (count: number) => boolean;
export declare class Group {
    selfIdentity: string;
    initiator: string;
    participants: string[];
    private _session;
    private _virgilCrypto;
    private _privateKeyLoader;
    private _groupManager;
    private _cardManager;
    constructor(options: {
        initiator: string;
        tickets: Ticket[];
        privateKeyLoader: PrivateKeyLoader;
        cardManager: CardManager;
        groupManager: GroupManager;
    });
    encrypt(data: Data): Promise<string | Buffer>;
    decrypt(encryptedData: Data, senderCard: ICard, encryptedAt?: Date | number): Promise<NodeBuffer | string>;
    update(): Promise<void>;
    add(participantCard: ICard): Promise<void>;
    add(participantCards: FindUsersResult): Promise<void>;
    remove(participantCard: ICard): Promise<void>;
    remove(participantCards: FindUsersResult): Promise<void>;
    reAdd(participantCard: ICard): Promise<void>;
    isEditable(): boolean;
}
