/// <reference types="node" />
import { AbstractLevelDOWN, AbstractIterator, AbstractOpenOptions, ErrorCallback, AbstractGetOptions, ErrorValueCallback, AbstractOptions, AbstractBatch, AbstractIteratorOptions, ErrorKeyValueCallback } from 'abstract-leveldown';
import { ICrypto, IKeyPair } from '../types';
export interface VirgilEncryptDownOptions {
    virgilCrypto: ICrypto;
    keyPair?: IKeyPair;
}
export declare type ValueType = string | Buffer;
declare class VirgilEncryptDownIterator<K> extends AbstractIterator<K, ValueType> {
    options: AbstractIteratorOptions;
    it: AbstractIterator<K, Buffer>;
    constructor(db: VirgilEncryptDown<K>, options: AbstractIteratorOptions);
    _next(callback: ErrorKeyValueCallback<K, ValueType>): void;
    _end(callback: ErrorCallback): void;
}
declare class VirgilEncryptDown<K> extends AbstractLevelDOWN<K, ValueType> {
    db: AbstractLevelDOWN;
    crypto: ICrypto;
    keyPair?: IKeyPair;
    constructor(db: AbstractLevelDOWN<K, ValueType>, options: VirgilEncryptDownOptions);
    _open(options: AbstractOpenOptions, callback: ErrorCallback): void;
    _close(callback: ErrorCallback): void;
    _get(key: K, options: AbstractGetOptions, callback: ErrorValueCallback<ValueType>): void;
    _put(key: K, value: ValueType, options: AbstractOptions, callback: ErrorCallback): NodeJS.Timeout | undefined;
    _del(key: K, options: AbstractOptions, callback: ErrorCallback): void;
    _batch(ops: ReadonlyArray<AbstractBatch<K, ValueType>>, options: AbstractOptions, callback: ErrorCallback): NodeJS.Timeout | undefined;
    _clear(options: AbstractOptions, callback: ErrorCallback): void;
    _iterator(options: AbstractIteratorOptions<K>): VirgilEncryptDownIterator<K>;
    setKeyPair(keyPair: IKeyPair): void;
    encrypt(value: ValueType): Buffer;
    decrypt(encryptedValue: ValueType): Buffer;
}
export default VirgilEncryptDown;
