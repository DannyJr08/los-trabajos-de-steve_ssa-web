import { KeyknoxManager } from './KeyknoxManager';
import { ICrypto, IPrivateKey, IPublicKey, IGroupSessionMessageInfo, IAccessTokenProvider, ICard, GroupTicket } from './types';
export declare class CloudGroupTicketStorage {
    static readonly DEFAULT_ROOT = "group-sessions";
    private readonly keyknoxManager;
    private readonly identity;
    private readonly privateKey;
    private readonly publicKey;
    private readonly root;
    constructor(options: {
        keyknoxManager: KeyknoxManager;
        identity: string;
        privateKey: IPrivateKey;
        publicKey: IPublicKey;
        root?: string;
    });
    static create(options: {
        accessTokenProvider: IAccessTokenProvider;
        identity: string;
        privateKey: IPrivateKey;
        publicKey: IPublicKey;
        virgilCrypto: ICrypto;
        root?: string;
    }): CloudGroupTicketStorage;
    store(groupSessionMessageInfo: IGroupSessionMessageInfo): Promise<void>;
    store(groupSessionMessageInfo: IGroupSessionMessageInfo, card: ICard): Promise<void>;
    store(groupSessionMessageInfo: IGroupSessionMessageInfo, cards: ICard[]): Promise<void>;
    retrieve(sessionId: string): Promise<GroupTicket[]>;
    retrieve(sessionId: string, identity: string, publicKey: IPublicKey): Promise<GroupTicket[]>;
    addRecipients(sessionId: string, cards: ICard[]): Promise<void>;
    addRecipient(sessionId: string, card: ICard): Promise<void>;
    reAddRecipient(sessionId: string, card: ICard): Promise<void>;
    removeRecipient(sessionId: string, identity: string, epochNumber?: number): Promise<void>;
    delete(sessionId: string): Promise<import("./types").DecryptedKeyknoxValueV2>;
    private static throwIfRecipientIsNotFound;
}
