import { IKeyknoxCrypto } from './IKeyknoxCrypto';
import { KeyknoxClient } from './KeyknoxClient';
import { IPrivateKey, IPublicKey, IAccessTokenProvider, DecryptedKeyknoxValueV1, DecryptedKeyknoxValueV2 } from './types';
export declare class KeyknoxManager {
    private readonly myKeyknoxCrypto;
    private readonly keyknoxClient;
    get keyknoxCrypto(): IKeyknoxCrypto;
    constructor(keyknoxCrypto: IKeyknoxCrypto, keyknoxClient: KeyknoxClient);
    static create(accessTokenProvider: IAccessTokenProvider, keyknoxCrypto: IKeyknoxCrypto): KeyknoxManager;
    v1Push(value: string, privateKey: IPrivateKey, publicKeys: IPublicKey | IPublicKey[], keyknoxHash?: string): Promise<DecryptedKeyknoxValueV1>;
    v1Pull(privateKey: IPrivateKey, publicKeys: IPublicKey | IPublicKey[]): Promise<DecryptedKeyknoxValueV1>;
    v1Reset(): Promise<DecryptedKeyknoxValueV1>;
    v1Update(options: {
        value: string;
        privateKey: IPrivateKey;
        publicKeys: IPublicKey | IPublicKey[];
        keyknoxHash: string;
        newPrivateKey?: IPrivateKey;
        newPublicKeys?: IPublicKey | IPublicKey[];
    }): Promise<DecryptedKeyknoxValueV1>;
    v1UpdateRecipients(options: {
        privateKey: IPrivateKey;
        publicKeys: IPublicKey | IPublicKey[];
        newPrivateKey?: IPrivateKey;
        newPublicKeys?: IPublicKey | IPublicKey[];
    }): Promise<DecryptedKeyknoxValueV1>;
    v2Push(options: {
        root: string;
        path: string;
        key: string;
        identities: string[];
        value: string;
        privateKey: IPrivateKey;
        publicKeys: IPublicKey | IPublicKey[];
        keyknoxHash?: string;
    }): Promise<DecryptedKeyknoxValueV2>;
    v2Pull(options: {
        root: string;
        path: string;
        key: string;
        identity?: string;
        privateKey: IPrivateKey;
        publicKeys: IPublicKey | IPublicKey[];
    }): Promise<DecryptedKeyknoxValueV2>;
    v2GetKeys(options: {
        root?: string;
        path?: string;
        identity?: string;
    }): Promise<string[]>;
    v2Reset(options: {
        root?: string;
        path?: string;
        key?: string;
        identity?: string;
    }): Promise<DecryptedKeyknoxValueV2>;
    private v1Decrypt;
    private v2Decrypt;
    private encrypt;
}
