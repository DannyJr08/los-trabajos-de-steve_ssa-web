import { CloudKeyStorage } from './CloudKeyStorage';
import { ICrypto, IPrivateKey, IPublicKey, IAccessTokenProvider, IKeyEntry, IKeyEntryStorage, Meta, KeyEntry } from './types';
export declare class SyncKeyStorage {
    private readonly cloudKeyStorage;
    private readonly keyEntryStorageWrapper;
    constructor(identity: string, cloudKeyStorage: CloudKeyStorage, keyEntryStorage: IKeyEntryStorage);
    static create(options: {
        identity: string;
        accessTokenProvider: IAccessTokenProvider;
        privateKey: IPrivateKey;
        publicKeys: IPublicKey | IPublicKey[];
        virgilCrypto: ICrypto;
        keyEntryStorage: IKeyEntryStorage;
    }): SyncKeyStorage;
    storeEntries(keyEntries: KeyEntry[]): Promise<IKeyEntry[]>;
    storeEntry(name: string, data: string, meta?: Meta): Promise<IKeyEntry>;
    updateEntry(name: string, data: string, meta?: Meta): Promise<void>;
    retrieveEntry(name: string): Promise<IKeyEntry>;
    retrieveAllEntries(): Promise<IKeyEntry[]>;
    existsEntry(name: string): Promise<boolean>;
    deleteEntry(name: string): Promise<void>;
    deleteEntries(names: string[]): Promise<void>;
    deleteAllEntries(): Promise<void>;
    updateRecipients(options: {
        newPrivateKey?: IPrivateKey;
        newPublicKeys?: IPublicKey | IPublicKey[];
    }): Promise<void>;
    sync(): Promise<void>;
    private throwUnlessKeyEntryExists;
    private throwIfKeyEntryExists;
    private syncKeyStorage;
}
