/// <reference types="node" />
import { Data, IPythiaTransformationKeyPair, IPythiaCrypto } from './types';
import { VirgilBrainKeyCrypto } from './VirgilBrainKeyCrypto';
export declare class VirgilPythiaCrypto implements IPythiaCrypto {
    private readonly virgilBrainKeyCrypto;
    constructor(virgilBrainKeyCrypto?: VirgilBrainKeyCrypto);
    blind(password: Data): {
        blindedPassword: Buffer;
        blindingSecret: Buffer;
    };
    deblind(options: {
        transformedPassword: Data;
        blindingSecret: Data;
    }): Buffer;
    computeTransformationKeyPair(options: {
        transformationKeyId: Data;
        pythiaSecret: Data;
        pythiaScopeSecret: Data;
    }): {
        privateKey: Buffer;
        publicKey: Buffer;
    };
    transform(options: {
        blindedPassword: Data;
        tweak: Data;
        transformationPrivateKey: Data;
    }): {
        transformedPassword: Buffer;
        transformedTweak: Buffer;
    };
    prove(options: {
        transformedPassword: Data;
        blindedPassword: Data;
        transformedTweak: Data;
        transformationKeyPair: IPythiaTransformationKeyPair;
    }): {
        proofValueC: Buffer;
        proofValueU: Buffer;
    };
    verify(options: {
        transformedPassword: Data;
        blindedPassword: Data;
        tweak: Data;
        transformationPublicKey: Data;
        proofValueC: Data;
        proofValueU: Data;
    }): any;
    getPasswordUpdateToken(options: {
        oldTransformationPrivateKey: Data;
        newTransformationPrivateKey: Data;
    }): Buffer;
    updateDeblindedWithToken(options: {
        deblindedPassword: Data;
        updateToken: Data;
    }): Buffer;
}
