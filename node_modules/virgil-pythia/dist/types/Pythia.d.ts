import { BreachProofPassword } from './BreachProofPassword';
import { IPythiaClient } from './IPythiaClient';
import { ProofKeys } from './ProofKeys';
import { Data, ICrypto, IPythiaCrypto } from './types';
export declare class Pythia {
    static SALT_BYTE_LENGTH: number;
    private readonly crypto;
    private readonly proofKeys;
    private readonly pythiaClient;
    private readonly pythiaCrypto;
    constructor(options: {
        crypto: ICrypto;
        proofKeys: ProofKeys;
        pythiaClient: IPythiaClient;
        pythiaCrypto: IPythiaCrypto;
    });
    verifyBreachProofPassword(password: Data, breachProofPassword: BreachProofPassword, includeProof?: boolean): Promise<boolean>;
    createBreachProofPassword(password: Data): Promise<BreachProofPassword>;
    updateBreachProofPassword(updateToken: string, breachProofPassword: BreachProofPassword): BreachProofPassword;
    private parseUpdateToken;
}
